export LD_LIBRARY_PATH="$TOOLDIR/libs:$LD_LIBRARY_PATH"
export PATH="$PATH:$TOOLDIR"

GAMEDATA="$GAMEDIR/gamedata"
AUDIOGROUP="audiogroup1.dat"
GAMEDROID="game.droid"
REQUIRED_FREESPACE=1073741824      # 1 GB
REQUIRED_FREESPACE_H=`echo $REQUIRED_FREESPACE | numfmt --to=iec`   # Human format (kB, MB, GB...)
REPACK_DURATION="5 to 10 minutes"
GAMEDROID_MD5="11cf9fe068460fec20bcc4fd596280b4"

echo "INFO: audiogroup file needs to be processed" > $CUR_TTY
echo "INFO: it can takes up to $REPACK_DURATION, please wait" > $CUR_TTY
text_viewer -w -f 30 -t "First run" \
    -m "Game data must be processed first. Please be patient it can take $REPACK_DURATION."

cd $GAMEDATA

# Check game.droid MD5SUM
calculated_md5=`md5sum $GAMEDROID | cut -d' ' -f1`
echo "md5sum $GAMEDROID = $calculated_md5"

[ "$calculated_md5" != "$GAMEDROID_MD5" ] \
    && text_viewer -w -f 30 \
        -t "Unknown MD5 hash" \
        -m "Your gamedata files aren't recognized. The installation process might fail."

# Check if there is enought free space to process the audiogroup file
freespace=`df -Pk . | tail -1 | awk '{print $4}'`
freespace=`expr $freespace \* 1024`
freespace_h=`echo $freespace | numfmt --to=iec`
echo "$freespace Bytes of free space are available"
echo "INFO: $freespace_h of free space are available" > $CUR_TTY

if [ $freespace -lt $REQUIRED_FREESPACE ];then
    echo "Not enought free space"
    echo "ERROR: The first time the game runs it temporarily needs $REQUIRED_FREESPACE_H of free space to process the game data." > $CUR_TTY
    echo "ERROR: You only have $freespace_h of free space available." > $CUR_TTY
    text_viewer -w -e -f 30 -t "Not enought free space" \
                -m "The first time the game runs it temporarily needs $REQUIRED_FREESPACE_H of free space to process the game data. You only have $freespace_h of free space available."
    exit 1
fi

# Extract audio data into the audo folder
mkdir audo
echo "Running readiffdata.py"
echo "INFO: extracting audio data from audiogroup" > $CUR_TTY
readiffdata.py -e AUDO "$AUDIOGROUP"
[ $? -ne 0 ] && text_viewer -w -e -f 30 -t "Error" -m "Cannot unpack audio data from $AUDIOGROUP" \
             && exit 1

# Convert WAV to OGG
cd audo
for wavfile in *.wav;do
    echo "Running oggenc on $wavfile"
    echo "INFO: converting $wavfile to ogg format" > $CUR_TTY

    oggenc "$wavfile" -o "$(basename -s .wav $wavfile).ogg"
    [ $? -ne 0 ] && text_viewer -w -e -f 30 -t "Error" -m "Cannot convert wav to ogg" \
                 && cd .. \
                 && mv wav_$AUDIOGROUP $AUDIOGROUP \
                 && exit 1

    # We don't need to keep the wav file after conversion
    rm $wavfile
done
cd ../

# Pack audio data into 
echo "Running repackiffdata.py"
echo "INFO: repacking audio data into audiogroup" > $CUR_TTY
repackiffdata.py -p AUDO "$AUDIOGROUP" "new_$AUDIOGROUP"
[ $? -ne 0 ] && text_viewer -w -e -f 30 -t "Error" -m "Cannot repack audio data into $AUDIOGROUP" \
             && exit 1

# Delete ogg files
rm -rf audo

# Replace audiogroup file with the new one
mv "new_$AUDIOGROUP" "$AUDIOGROUP" 
[ $? -ne 0 ] && text_viewer -w -e -f 30 -t "Error" -m "Cannot update $AUDIOGROUP" \
             && exit 1



# Patch game.droid
echo "Running xdelta"
echo "INFO: patching $GAMEDROID" > $CUR_TTY
xdelta3 -d -s "$GAMEDROID" "$GAMEDIR/patchs/noext_audiogroup_ogg.vcdiff" "new_$GAMEDROID"
[ $? -ne 0 ] && text_viewer -w -e -f 30 -t "Error" -m "Cannot patch $GAMEDROID" \
             && exit 1

# Replace game.droid with the new one
mv "new_$GAMEDROID" "$GAMEDROID" 
[ $? -ne 0 ] && text_viewer -w -e -f 30 -t "Error" -m "Cannot update game.droid" \
             && exit 1

cd ..